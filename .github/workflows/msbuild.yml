# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: WindowsAppSDK Build

on:
  push:
    branches: [ "main" ]
    paths:
      - 'windows/**'
      - 'PB/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'windows/**'
      - 'PB/**'

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: windows

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Debug

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - uses: lukka/get-cmake@latest

    - name: Set environment variable
      run: echo "VCPKG_DEFAULT_TRIPLET=arm64-windows" >> $GITHUB_ENV

    - name: run-vcpkg
      uses: lukka/run-vcpkg@v11.5
      with:
        # Specify the full SHA-1 hash of a Git commit (not a branch name, nor a tag!) that establishes which version of vcpkg needs to be used. When using vcpkg as a Git submodule, this input is *not* needed as implicitly specified by the submodule.
        vcpkgGitCommitId: 'b2cb0da531c2f1f740045bfe7c4dac59f0b2b69c'
        # Run the installation of packages by running `vcpkg install` on the directory of the discovered 'vcpkg.json' file. Default is false.
        runVcpkgInstall: true
        # Enable the caching of the vcpkg executable and its data files (e.g. ports) by setting it to false. Default is true. Set this input to false when the vcpkg's executable is not delivered as a prebuilt file upon bootstrapping vcpkg. This does not disable vcpkg's binary cache which is always on and can be controlled by the user with the env var VCPKG_BINARY_SOURCES.
        doNotCache: false
        # Specify the glob expression used to discover the vcpkg.json whose content's hash is added to the cache key. On Windows runners using `github.workspace` context to form the expression would not work as expected since it contains backslashes. Use instead `**/path/to/vcpkg.json` to match the desired `vcpkg.json` file.
        vcpkgJsonGlob: '**/vcpkg.json'

    - name: Set environment variable
      run: echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $GITHUB_ENV

    - name: run-vcpkg
      uses: lukka/run-vcpkg@v11.5
      with:
        # Specify the full SHA-1 hash of a Git commit (not a branch name, nor a tag!) that establishes which version of vcpkg needs to be used. When using vcpkg as a Git submodule, this input is *not* needed as implicitly specified by the submodule.
        vcpkgGitCommitId: 'b2cb0da531c2f1f740045bfe7c4dac59f0b2b69c'
        # Run the installation of packages by running `vcpkg install` on the directory of the discovered 'vcpkg.json' file. Default is false.
        runVcpkgInstall: true
        # Enable the caching of the vcpkg executable and its data files (e.g. ports) by setting it to false. Default is true. Set this input to false when the vcpkg's executable is not delivered as a prebuilt file upon bootstrapping vcpkg. This does not disable vcpkg's binary cache which is always on and can be controlled by the user with the env var VCPKG_BINARY_SOURCES.
        doNotCache: false
        # Specify the glob expression used to discover the vcpkg.json whose content's hash is added to the cache key. On Windows runners using `github.workspace` context to form the expression would not work as expected since it contains backslashes. Use instead `**/path/to/vcpkg.json` to match the desired `vcpkg.json` file.
        vcpkgJsonGlob: '**/vcpkg.json'

    - name: Run CMake pb-release
      uses: lukka/run-cmake@v10.8
      with:
        # This is the default path to the CMakeLists.txt along side the
        # CMakePresets.json. Change if you need have CMakeLists.txt and CMakePresets.json
        # located elsewhere.
        cmakeListsTxtPath: '${{ github.workspace }}/PB/CMakeLists.txt'

        # This is the name of the CMakePresets.json's configuration to use to generate
        # the project files. This configuration leverages the vcpkg.cmake toolchain file to
        # run vcpkg and install all dependencies specified in vcpkg.json.
        configurePreset: 'pblib-release'

    - name: Run CMake pb-release-arm64
      uses: lukka/run-cmake@v10.8
      with:
        # This is the default path to the CMakeLists.txt along side the
        # CMakePresets.json. Change if you need have CMakeLists.txt and CMakePresets.json
        # located elsewhere.
        cmakeListsTxtPath: '${{ github.workspace }}/PB/CMakeLists.txt'

        # This is the name of the CMakePresets.json's configuration to use to generate
        # the project files. This configuration leverages the vcpkg.cmake toolchain file to
        # run vcpkg and install all dependencies specified in vcpkg.json.
        configurePreset: 'pblib-release-arm64'
  

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}
        
    - name: Build pblib-x64
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /property:Platform=x64 -target:pblib-x64 ${{env.SOLUTION_FILE_PATH}}

    - name: Build pbtests-x64
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /property:Platform=x64 -target:pbtests-x64 ${{env.SOLUTION_FILE_PATH}}

    - name: Build PhotobookNet
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /property:Platform=x64 -target:PhotobookNet ${{env.SOLUTION_FILE_PATH}}

    - name: Generate test data
      run: python PB\test-data\generate-data.py PB\test-data

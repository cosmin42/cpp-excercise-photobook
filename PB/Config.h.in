#pragma once
#include <stop_token>

#include <pb/common/Log.h>
#include <pb/persistence/Persistence.h>
#include <pb/util/Timer.h>

#if __has_include(<pb/common/@PRINTER_TYPE@.h>)
#include <pb/common/@PRINTER_TYPE@.h>
#else
#warning "@PRINTER_TYPE@ doesn't exist"
#endif

#include <pb/DataManager.h>

namespace PB {
  
class Context final {
public:
  static constexpr Context &inst() { return sContext; }

  static constexpr LogLevel logLevel() { return LogLevel::@LOG_LEVEL@; }

  static constexpr const char* persistentFileName() { return "persistent.txt"; }

  static constexpr const char *jpgExt = ".jpg";
  static constexpr const char *bookExt = ".photobook";

  static constexpr std::initializer_list thumbnailSize = {120, 80};

  Log const &printer() { return mLogPrinter; }

  std::stop_source sStopSource;

  DataManager& data() { return mDataManager;}

private:
  Context() = default;
  Context(Context const &) = delete;
  Context(Context &&) = delete;
  Context &operator=(Context const &) = delete;
  ~Context() = default;

  DataManager mDataManager;

  static Context sContext;

  @PRINTER_TYPE@ mLogPrinter;
};

} // namespace PB

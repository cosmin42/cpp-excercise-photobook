#pragma once
#include <stop_token>

#include <pb/common/Log.h>
#include <pb/persistence/Persistence.h>
#include <pb/util/Timer.h>

#if __has_include(<pb/common/@PRINTER_TYPE@.h>)
#include <pb/common/@PRINTER_TYPE@.h>
#else
#warning "@PRINTER_TYPE@ doesn't exist"
#endif

namespace PB {
  
class Context final {
public:
  static constexpr Context &inst() { return sContext; }

  static constexpr LogLevel logLevel() { return LogLevel::@LOG_LEVEL@; }

  static constexpr const char* PERSISTENCE_FILENAME = "persistent.txt";

  static constexpr const char *JPG_EXTENSION = ".jpg";
  static constexpr const char *BOOK_EXTENSION = ".photobook";

  static constexpr int SMALL_THUMBNAIL_WIDTH = 120;
  static constexpr int SMALL_THUMBNAIL_HEIGHT = 80;
  
  static constexpr int MEDIUM_THUMBNAIL_WIDTH = 800;
  static constexpr int MEDIUM_THUMBNAIL_HEIGHT = 530;

  static constexpr const char *SMALL_THUMBNAIL_NAME = "thumbnail-small";
  static constexpr const char *MEDIUM_THUMBNAIL_NAME = "thumbnail-medium";
  static constexpr unsigned    THUMBNAIL_THREADPOOL_THREAD_COUNT = 4;

  static constexpr const char *PHOTO_TIMELINE_DEFAULT_IMAGE = "Assets/coffee-cup.png";

  static constexpr const char *VERSION = "0.1.0";

  Log const &printer() { return mLogPrinter; }

  std::stop_source sStopSource;

private:
  Context() = default;
  Context(Context const &) = delete;
  Context(Context &&) = delete;
  Context &operator=(Context const &) = delete;
  ~Context() = default;

  static Context sContext;

  @PRINTER_TYPE@ mLogPrinter;
};

} // namespace PB

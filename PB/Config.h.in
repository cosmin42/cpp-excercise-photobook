#pragma once

#include <pb/common/Log.h>
#include <pb/util/Timer.h>
#if __has_include(<pb/common/@PRINTER_TYPE@.h>)

#include <pb/common/@PRINTER_TYPE@.h>

#else
#warning "@PRINTER_TYPE@ doesn't exist"
#endif

namespace PB {
  
class Context final {
public:
  static constexpr Context &inst() { return sContext; }

  static constexpr LogLevel logLevel() { return LogLevel::@LOG_LEVEL@; }

  Log const &printer() { return mLogPrinter; }

  std::stop_source sStopSource;

private:
  Context() = default;
  Context(Context const &) = delete;
  Context(Context &&) = delete;
  Context &operator=(Context const &) = delete;
  ~Context() = default;

  static Context sContext;

  @PRINTER_TYPE@ mLogPrinter;
};

} // namespace PB

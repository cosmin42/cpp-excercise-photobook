#pragma once
#include <stop_token>

#include <pb/config/Log.h>
#include <pb/util/Timer.h>
#include <pb/project/PaperSettings.h>

#if __has_include(<pb/config/@PRINTER_TYPE@.h>)
#include <pb/config/@PRINTER_TYPE@.h>
#else
#warning "@PRINTER_TYPE@ doesn't exist"
#endif

namespace PB {
  
class Context final {
public:
  static constexpr Context &inst() { return sContext; }

  static constexpr LogLevel logLevel() { return LogLevel::@LOG_LEVEL@; }

  static constexpr const char* PERSISTENCE_FILENAME = "persistent.txt";

  static constexpr const char *JPG_EXTENSION = ".jpg";
  static constexpr const char *BOOK_EXTENSION = ".photobook";

  static constexpr int SMALL_THUMBNAIL_WIDTH = 120;
  static constexpr int SMALL_THUMBNAIL_HEIGHT = 80;
  
  static constexpr int MEDIUM_THUMBNAIL_WIDTH = 800;
  static constexpr int MEDIUM_THUMBNAIL_HEIGHT = 530;


  // The bounding box where the paper size will fit
  static constexpr int CANVAS_MIN_MAX_WIDTH = 438;
  static constexpr int CANVAS_MIN_MAX_HEIGHT = 310;

  static constexpr const char *SMALL_THUMBNAIL_NAME = "thumbnail-small";
  static constexpr const char *MEDIUM_THUMBNAIL_NAME = "thumbnail-medium";
  static constexpr unsigned    THUMBNAIL_THREADPOOL_THREAD_COUNT = 4;

  // Fix separator
  static constexpr const char *PHOTO_TIMELINE_DEFAULT_IMAGE =
    "Assets\\coffee-cup.png";
  static constexpr const char *LOADING_PHOTO_PLACEHOLDER =
    "Assets\\loading-image.png";

  static constexpr const char *VERSION = "0.1.0";

  static constexpr PaperSettings A4_LANDSCAPE_PAPER = {PaperType::A4_Landscape,
                                                       72, 842, 595};
  static constexpr PaperSettings A5_LANDSCAPE_PAPER = {PaperType::A5_Landscape,
                                                       72, 595, 421};
  static constexpr PaperSettings A3_LANDSCAPE_PAPER = {PaperType::A3_Landscape,
                                                       72, 1190, 842};

  static constexpr PaperSettings A4_PORTRAIT_PAPER = {PaperType::A4_Portrait,
                                                      72, 595, 842};
  static constexpr PaperSettings A5_PORTRAIT_PAPER = {PaperType::A5_Portrait,
                                                      72, 421, 595};
  static constexpr PaperSettings A3_PORTRAIT_PAPER = {PaperType::A3_Portrait,
                                                      72, 842, 1190};

  static constexpr int MIN_PAPER_WIDTH = 200;
  static constexpr int MIN_PAPER_HEIGHT = 200;

  Log const &printer() { return mLogPrinter; }

  std::stop_source sStopSource;

  static constexpr std::vector<std::string> HAPPY_WORDS = {
    "Joyful",       "Blissful",   "Radiant",       "Cheerful",
    "Exuberant",    "Jubilant",   "Gleeful",       "Delighted",
    "Content",      "Ecstatic",   "Merry",         "Jovial",
    "Upbeat",       "Elated",     "Happy",         "Sunny",
    "Lighthearted", "Buoyant",    "Festive",       "Vibrant",
    "Grateful",     "Satisfied",  "Pleased",       "Overjoyed",
    "Optimistic",   "Pleased",    "Thrilled",      "Euphoric",
    "Playful",      "Carefree",   "Radiant",       "Wonderful",
    "Jolly",        "Zestful",    "Bubbly",        "Heartwarming",
    "Cheery",       "Upbeat",     "Chirpy",        "Sanguine",
    "Enthusiastic", "Serene",     "Up-lifting",    "Giddy",
    "Gleaming",     "Bountiful",  "Exultant",      "Merry-making",
    "Comical",      "Hilarious",  "Dynamic",       "Sweet",
    "Whimsical",    "Spirited",   "Sprightly",     "Delightful",
    "Radiant",      "Uplifting",  "Optimistic",    "Tickled",
    "Chipper",      "Pleasant",   "Buoyant",       "Lively",
    "Sparkling",    "Tickled",    "Exhilarating",  "Bouncy",
    "Festal",       "Vivacious",  "Gladsome",      "Pleased",
    "Elated",       "Blithesome", "Merry-hearted", "Gleamy",
    "Zippy",        "Snappy",     "Piquant",       "Buoyant",
    "Enlivened",    "Beaming",    "Radiant",       "Jocund",
    "Grinning",     "Giggly",     "Sunny",         "Uplifted",
    "Hopeful",      "Amused",     "Merry-making",  "Overjoyed",
    "Glad",         "Contented",  "Radiant",       "Effervescent",
    "Spry",         "Snug",       "Jovial",        "Untroubled"};

private:
  Context() = default;
  Context(Context const &) = delete;
  Context(Context &&) = delete;
  Context &operator=(Context const &) = delete;
  ~Context() = default;

  static Context sContext;

  @PRINTER_TYPE@ mLogPrinter;
};

} // namespace PB
